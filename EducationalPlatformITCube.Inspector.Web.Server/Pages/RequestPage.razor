@page "/request"
@using System.Collections.Generic
@using ClosedXML.Excel;
@using Microsoft.AspNetCore.Components
@using EducationalPlatformITCube.Inspector.Web.Server.Pages.Classes;
@using Newtonsoft.Json
@using System.Net.Mail;
@using System.Net;
@using OfficeOpenXml;
@using System.Net.Http.Headers;
@using System.Data;
@using Syncfusion.XlsIO;
@using Microsoft.Office.Interop.Excel;
@inject NavigationManager NavigationManager
@inject HttpClient httpClient
@inject SendMail sendM
@inject DB context
@inject Microsoft.JSInterop.IJSRuntime JS
httpClient.BaseAddress = new Uri("http://localhost:5172");

<div class="filter-container" style="margin-top:90px" >
    <label>Фильтр по статусу:</label>
    <select @bind="statusFilter">
        <option value="">Все</option>
        <option value="Ожидает обработки">Ожидает обработки</option>
        <option value="Требуется дополнительная информация">Требуется дополнительная информация</option>
        <option value="Отказ">Отказ</option>
        <option value="Принято">Принят</option>
        <option value="Принято">Зачислен</option>
    </select>
</div>

@if (Requests != null)
{
    <div style="margin-top: 20px" class="card">
        <div class="button-container">
            @*<button class="danger" title="Delete Selected">
                <svg viewBox="0 0 448 512" width="16" title="trash-alt">
                    <path d="M32 464a48 48 0 0 0 48 48h288a48 48 0 0 0 48-48V128H32zm272-256a16 16 0 0 1 32 0v224a16 16 0 0 1-32 0zm-96 0a16 16 0 0 1 32 0v224a16 16 0 0 1-32 0zm-96 0a16 16 0 0 1 32 0v224a16 16 0 0 1-32 0zM432 32H312l-9.4-18.7A24 24 0 0 0 281.1 0H166.8a23.72 23.72 0 0 0-21.4 13.3L136 32H16A16 16 0 0 0 0 48v32a16 16 0 0 0 16 16h416a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16z"></path>
                </svg>
            </button>*@
            @*<button class="primary" title="Add New Data">
                <svg viewBox="0 0 512 512" width="16" title="plus-circle">
                    <path d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm144 276c0 6.6-5.4 12-12 12h-92v92c0 6.6-5.4 12-12 12h-56c-6.6 0-12-5.4-12-12v-92h-92c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h92v-92c0-6.6 5.4-12 12-12h56c6.6 0 12 5.4 12 12v92h92c6.6 0 12 5.4 12 12v56z"></path>
                </svg>
            </button>*@
            <button @onclick="DownloadExcelFile" style="color: black">Сформировать группы</button>
        </div>
        <div class="table-concept">
            <input class="table-radio" type="radio" name="table_radio" id="table_radio_0" checked="checked" />
            <div class="table-display">
                Показанно от 1 до @pageSize
                из @Requests.Count
            </div>
            <table>
                <thead>
                    <tr>
                        <th>№</th>
                        <th>ФИО ребенка</th>
                        <th>Дата рождения</th>
                        <th>Направление обучения</th>
                        <th>ФИО родителя</th>
                        <th>Статус заявки</th>
                        <th>Комментарий</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var request in FilteredRequests)
                    {
                        <tr>
                            <td>@request.posInQuery</td>
                            <td>@request.LastName @request.FirstName</td>
                            <td>@request.DateOfBirth</td>
                            <td>@request.StudyDirection</td>
                            <td>@request.ParentLastName @request.ParentFirstName</td>
                            <td>@request.Status</td>
                            <td>@request.AdminComment</td>
                            <td>
                                <button class="btn btn-primary" style="background: #3498db" @onclick="(() => ButtonClicked(request.Id))">Просмотр</button>
                            </td>
                        </tr>
                    }
                </tbody>
                @*<tfoot>
                    <tr>
                        <td colspan="9">
                            <nav aria-label="Pagination">
                                <ul >
                                    @if (currentPage > 1)
                                    {
                                        <li class="page-item">
                                            <button class="page-link" @onclick="() => ChangePage(currentPage - 1)">Предыдущая</button>
                                        </li>
                                    }

                                    @for (int i = 1; i <= totalPages; i++)
                                    {
                                        <li class="page-item @(currentPage == i ? "active" : "")">
                                            <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                                        </li>
                                    }

                                    @if (currentPage < totalPages)
                                    {
                                        <li class="page-item">
                                            <button class="page-link" @onclick="() => ChangePage(currentPage + 1)">Следующая</button>
                                        </li>
                                    }
                                </ul>
                            </nav>
                        </td>
                    </tr>
                </tfoot>*@
            </table>
        </div>
    </div>
}
else
{
    <br />
    <br />
    <br />
    <br />
    <p>Loading...</p>
}
@code {
    MemoryStream excelStream;
    public static List<RequestModel> Requests { get; set; }
    int pageSize = 10; // Количество элементов на странице
    int currentPage = 1; // Текущая страница
    int totalPages;  //(int)Math.Ceiling((decimal)Requests.Count / pageSize); // Общее количество страниц
    List<RequestModel> displayedRequests; //Requests.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList(); // Отображаемые запросы на текущей странице
    private string statusFilter;
    private string searchInput;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Запуск запроса");
        LoadTestData(); // Загружаем тестовые данные при инициализации страницы
                        //Requests = await httpClient.GetFromJsonAsync<List<RequestModel>>("/api/Sheets"); // Используйте правильный URL пути к вашему контроллеру
                        //await GetDataFromController();
        totalPages = (int)Math.Ceiling((decimal)Requests.Count / pageSize);
        displayedRequests = Requests.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
    }

    private void ButtonClicked(int id)
    {
        NavigationManager.NavigateTo($"/applicationRedact/{id}");
        // Обработка нажатия кнопки с передачей значения id
        // Можно выполнить какую-либо логику или перенаправление на другую страницу с использованием значения id
    }

    void ChangePage(int newPage)
    {
        currentPage = newPage;
        displayedRequests = Requests.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
    }


    private async Task GetDataFromController()
    {
        try
        {
            var response = await httpClient.GetAsync("/api/Requests");
            response.EnsureSuccessStatusCode();

            Requests = await response.Content.ReadFromJsonAsync<List<RequestModel>>();
            Requests.RemoveAt(0);
            int query = 1;
            foreach (var f in Requests)
            {
                try
                {
                    if (Convert.ToInt32(f.Age) < 6 || Convert.ToInt32(f.Age) > 18)
                    {
                        //await sendM.SendEmail(f.Email, "Отказ в заявке", "Не подходящий возраст ребенка");
                        f.AdminComment = "Отказ";
                    }
                } catch
                {

                }

                if (f.AdminComment == null)
                {
                    f.AdminComment = "Ожидает обработки";
                }
                if (f.AdminComment == "Ожидает обработки")
                {
                    //f.posInQuery = Convert.ToString(query);
                    //query++;
                }
            }

            // Обработка полученных данных
        }
        catch (Exception ex)
        {
            Console.WriteLine("Ошибка запроса " + ex.Message);
            // Обработка ошибки
        }
    }

    private static readonly Random random = new Random();
    private const string chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

    public static string GenerateRandomString(int length)
    {
        return new string(Enumerable.Repeat(chars, length)
            .Select(s => s[random.Next(s.Length)]).ToArray());
    }


    private void ExcelGeneration()
    {
        ExcelExport excelExport = new ExcelExport();
        excelExport.ExcelGenerate(JS);
    }

    private void DownloadExcelFile()
    {
        var excelBytes = GenerateExcelWorkbook();
        JS.InvokeVoidAsync("saveAsFile", $"group_{DateTime.Now.ToString("yyyyMMdd_HHmmss")}.xlsx", Convert.ToBase64String(excelBytes));
    }

    public static byte[] GenerateExcelWorkbook()
    {
        List<RequestModel> list = Requests.Where(x => x.Status == "Принят").ToList();

        //var list = new List<RequestModel>()
        //{
        //    new RequestModel { FirstName = "catcher", Age = 18 },
        //    new RequestModel { FirstName = "james", Age = 20 },
        //};

        foreach(var f in list)
        {
            f.Login = GenerateRandomString(6);
            f.Password = GenerateRandomString(6);
            f.Status = "Принят";
        }

        list[0].Login = "GF2LV1";
        list[0].Password = "GF2LV1";


        var stream = new MemoryStream();

        ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
        using (var package = new ExcelPackage(stream))
        {

            var workSheet = package.Workbook.Worksheets.Add("32P");
            List<RequestModel> pythonFirstList = list.Where(x => x.StudyDirection == "Python" && x.Session == "Первая").ToList();
            // simple way
            workSheet.Cells.LoadFromCollection(pythonFirstList, true);
            var workSheet2 = package.Workbook.Worksheets.Add("33P");
            List<RequestModel> pythonSecondList = list.Where(x => x.StudyDirection == "Python" && x.Session == "Вторая").ToList();
            // simple way
            workSheet2.Cells.LoadFromCollection(pythonSecondList, true);

            var workSheet3 = package.Workbook.Worksheets.Add("7J");
            List<RequestModel> javaFirstList = list.Where(x => x.StudyDirection == "Java" && x.Session == "Первая").ToList();
            // simple way
            workSheet3.Cells.LoadFromCollection(javaFirstList, true);
            var workSheet4 = package.Workbook.Worksheets.Add("2J");
            List<RequestModel> javaSecondList = list.Where(x => x.StudyDirection == "Java" && x.Session == "Вторая").ToList();
            // simple way
            workSheet4.Cells.LoadFromCollection(javaSecondList, true);

            //var workSheet5 = package.Workbook.Worksheets.Add("1SA");
            //List<RequestModel> SAFirstList = list.Where(x => x.StudyDirection == "SA" && x.Session == "Первая").ToList();
            //// simple way
            //workSheet5.Cells.LoadFromCollection(SAFirstList, true);
            //var workSheet6 = package.Workbook.Worksheets.Add("2SA");
            //List<RequestModel> SASecondList = list.Where(x => x.StudyDirection == "SA" && x.Session == "Вторая").ToList();
            //// simple way
            //workSheet6.Cells.LoadFromCollection(SASecondList, true);

            var workSheet7 = package.Workbook.Worksheets.Add("8R");
            List<RequestModel> RFirstList = list.Where(x => x.StudyDirection == "R" && x.Session == "Первая").ToList();
            // simple way
            workSheet7.Cells.LoadFromCollection(RFirstList, true);
            var workSheet8 = package.Workbook.Worksheets.Add("2R");
            List<RequestModel> RSecondList = list.Where(x => x.StudyDirection == "R" && x.Session == "Вторая").ToList();
            // simple way
            workSheet8.Cells.LoadFromCollection(RSecondList, true);

            //var workSheet9 = package.Workbook.Worksheets.Add("1MR");
            //List<RequestModel> MRFirstList = list.Where(x => x.StudyDirection == "MR" && x.Session == "Первая").ToList();
            //// simple way
            //workSheet9.Cells.LoadFromCollection(MRFirstList, true);
            //var workSheet10 = package.Workbook.Worksheets.Add("2MR");
            //List<RequestModel> MRSecondList = list.Where(x => x.StudyDirection == "MR" && x.Session == "Вторая").ToList();
            //// simple way
            //workSheet10.Cells.LoadFromCollection(MRSecondList, true);

            var workSheet11 = package.Workbook.Worksheets.Add("6VR");
            List<RequestModel> VRFirstList = list.Where(x => x.StudyDirection == "VR" && x.Session == "Первая").ToList();
            // simple way
            workSheet11.Cells.LoadFromCollection(pythonFirstList, true);
            var workSheet12 = package.Workbook.Worksheets.Add("5VR");
            List<RequestModel> VRSecondList = list.Where(x => x.StudyDirection == "VR" && x.Session == "Вторая").ToList();
            // simple way
            workSheet12.Cells.LoadFromCollection(pythonSecondList, true);

            ////// mutual
            ////workSheet.Row(1).Height = 20;
            ////workSheet.Row(1).Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            ////workSheet.Row(1).Style.Font.Bold = true;
            ////workSheet.Cells[1, 1].Value = "No";
            ////workSheet.Cells[1, 2].Value = "Name";
            ////workSheet.Cells[1, 3].Value = "Age";

            ////int recordIndex = 2;
            ////foreach (var item in list)
            ////{
            ////    workSheet.Cells[recordIndex, 1].Value = (recordIndex - 1).ToString();
            ////    workSheet.Cells[recordIndex, 2].Value = item.UserName;
            ////    workSheet.Cells[recordIndex, 3].Value = item.Age;
            ////    recordIndex++;
            ////}

            return package.GetAsByteArray();
        }
    }


    private void LoadTestData()
    {
        Requests = context.RequestModels;
        int pos = 1;
        foreach (var f in Requests)
        {
            if (f.Status == "Ожидает обработки")
                f.posInQuery = pos;

            pos++;
        }
    }

    private void EditRequest(RequestModel request)
    {
        // Логика для редактирования заявки
        //var navigationParameters = new Dictionary<string, object> { { "request", request } };
        //NavigationManager.NavigateTo($"/edit-request?request={Uri.EscapeDataString(JsonConvert.SerializeObject(request))}", forceLoad: true);
        string requestJson = System.Web.HttpUtility.UrlEncode(Newtonsoft.Json.JsonConvert.SerializeObject(request));
        NavigationManager.NavigateTo($"/edit-request/{requestJson}");
    }

    private void DeleteRequest(RequestModel requestId)
    {
        // Логика для удаления заявки
        Requests.Remove(requestId);
    }

    private List<RequestModel> FilteredRequests
    {
        get
        {
            if ( !string.IsNullOrWhiteSpace(statusFilter))
            {
                return context.RequestModels.Where(r =>
                    
                    (string.IsNullOrWhiteSpace(statusFilter) || r.Status.Equals(statusFilter, StringComparison.OrdinalIgnoreCase))
                ).ToList();
            }
            else
            {
                return context.RequestModels;
            }
        }
    }
}